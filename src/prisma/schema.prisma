generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum QuestionType {
  MCQ
  SHORT
  FILLINTHEBLANK
  MULTIFILLINTHEBLANK
  MULTIPLSHORT
  SEQUENCE
  MULTIPLSHORTV2
  MULTIPLLONG
  MULTIPLETRUEFALSE
  LONG
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
}

enum ExportTypes {
  PRACTICE
  PAPER
}

enum ExportedQuestionStatus {
  NORMAL
  DELETED
}

model User {
  id                String             @id @default(uuid())
  email             String?            @unique
  password          String?
  name              String?
  role              UserRole?          @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  reserved          ExportedQuestion[]
  approved          Boolean            @default(false)
  status            Status             @default(INACTIVE)
  sentRequests      ConnectionRequest[] @relation("SentRequests")
  receivedRequests  ConnectionRequest[] @relation("ReceivedRequests")
  profileImage      String?     
  assignmentQuestions assignmentQuestion[] 
  
}

model ConnectionRequest {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  status      String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

model School {
  id        String   @id @default(uuid())
  type      String?  @unique
  grades    Grade[]
 assignmentQuestions assignmentQuestion[] @relation("Assignment_School")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id        String    @id @default(uuid())
  school    School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  String?
  grade     String?
  subjects  Subject[] 
 assignmentQuestions assignmentQuestion[] @relation("Assignment_Grade")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@unique([schoolId, grade])
}

model Subject {
  id        String   @id @default(uuid())
  gradeId   String?
  grade     Grade?   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  subject   String?
  topics    Topic[]  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 assignmentQuestions assignmentQuestion[] @relation("Assignment_Subject")


  @@unique([gradeId, subject])
}



model Topic {
  id        String     @id @default(uuid())
  subject   Subject?   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String?
  topic     String?
  subTopics SubTopic[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
 assignmentQuestions assignmentQuestion[] @relation("Assignment_Topic")


  @@unique([subjectId, topic])
}

model SubTopic {
  id        String     @id @default(uuid())
  topic     Topic?     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String?
  subTopic  String?
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

 assignmentQuestions assignmentQuestion[] @relation("Assignment_SubTopic")
  @@unique([topicId, subTopic])
}

model Question {
  id                String             @id @default(uuid())
  subTopic          SubTopic?          @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  subTopicId        String?
  question          String?
  type              QuestionType
  marks             Int
  difficultyLevel   DifficultyLevel
  answers           Answer[]
  reservedQuestions ExportedQuestion[]
  questionImage     String             @default("")
  additional        String             @default("")
  mcqImage          Boolean            @default(false)
  answerCount       Int                @default(0)
  importId          String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  assignmentQuestions assignmentQuestion[] @relation("AssignmentQuestions")
  // @@unique([subTopicId, question])
}

model Image {
  id        Int      @id @default(autoincrement())
  urls      String[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id          String       @id @default(uuid())
  question    Question?    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String?
  // answer     String?      @unique
  answer      String?
  type        QuestionType
  importId    String       @default("")
  sequenceNo  Int          @default(0)
  additional  String       @default("")
  isCorrect   Boolean
  answerImage String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ExportedQuestion {
  id          String                 @id @default(uuid())
  name        String                 @default("")
  user        User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question?              @relation(fields: [questionsId], references: [id], onDelete: Cascade)
  userId      String?
  questionsId String?
  exportType  ExportTypes
  status      ExportedQuestionStatus @default(NORMAL)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}
model assignmentQuestion {
  id          String    @id @default(uuid())
  name        String    @default("")
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String?
  
  questions   Question[] @relation("AssignmentQuestions")
  
  // Relations to School, Grade, Subject, Topic, SubTopic
  school      School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade,  name:"Assignment_School")
  schoolId    String?
  
  grade       Grade?    @relation(fields: [gradeId], references: [id], onDelete: Cascade, name:"Assignment_Grade")
  gradeId     String?
  
  subject     Subject?  @relation(fields: [subjectId], references: [id], onDelete: Cascade, name:"Assignment_Subject")
  subjectId   String?
  
  topic       Topic?    @relation(fields: [topicId], references: [id], onDelete: Cascade, name:"Assignment_Topic")
  topicId     String?
  
  subTopic    SubTopic?  @relation(fields: [subTopicId], references: [id], onDelete: Cascade, name: "Assignment_SubTopic")
  subTopicId  String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
