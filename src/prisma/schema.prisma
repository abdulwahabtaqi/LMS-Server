generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  TEACHER
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum QuestionType {
  MCQ
  SHORT
  FILLINTHEBLANK
  MULTIFILLINTHEBLANK
  MULTIPLSHORT
  SEQUENCE
  MULTIPLSHORTV2
  MULTIPLLONG
  MULTIPLETRUEFALSE
  LONG
}

enum DifficultyLevel {
  EASY
  MEDIUM
  HARD
}

enum ExportTypes {
  PRACTICE
  PAPER
}

enum ExportedQuestionStatus {
  NORMAL
  DELETED
}

model User {
  id                String             @id @default(uuid())
  email             String?            @unique
  password          String?
  name              String?
  role              UserRole?          @default(USER)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  reserved          ExportedQuestion[]
  approved          Boolean            @default(false)
  status            Status             @default(INACTIVE)
  sentRequests      ConnectionRequest[] @relation("SentRequests")
  receivedRequests  ConnectionRequest[] @relation("ReceivedRequests")
  assignments       Assignment[]        @relation("TeacherAssignments")
  submissions       Submission[]        @relation("StudentSubmissions")
  profileImage      String?     
  
}

model ConnectionRequest {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String
  status      String   
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sender      User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

model School {
  id        String   @id @default(uuid())
  type      String?  @unique
  grades    Grade[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Grade {
  id        String    @id @default(uuid())
  school    School?   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  schoolId  String?
  grade     String?
  subjects  Subject[] // Assuming a Grade can have multiple subjects
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
   assignments Assignment[] 

  @@unique([schoolId, grade])
}

model Subject {
  id        String   @id @default(uuid())
  gradeId   String?
  grade     Grade?   @relation(fields: [gradeId], references: [id], onDelete: Cascade)
  subject   String?
  topics    Topic[]  
  assignments Assignment[] // Add this field for the opposite relation
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gradeId, subject])
}



model Topic {
  id        String     @id @default(uuid())
  subject   Subject?   @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId String?
  topic     String?
  subTopics SubTopic[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([subjectId, topic])
}

model SubTopic {
  id        String     @id @default(uuid())
  topic     Topic?     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String?
  subTopic  String?
  questions Question[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([topicId, subTopic])
}

model Question {
  id                String             @id @default(uuid())
  subTopic          SubTopic?          @relation(fields: [subTopicId], references: [id], onDelete: Cascade)
  subTopicId        String?
  question          String?
  type              QuestionType
  marks             Int
  difficultyLevel   DifficultyLevel
  answers           Answer[]
  reservedQuestions ExportedQuestion[]
  questionImage     String             @default("")
  additional        String             @default("")
  mcqImage          Boolean            @default(false)
  answerCount       Int                @default(0)
  importId          String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  // @@unique([subTopicId, question])
}

model Image {
  id        Int      @id @default(autoincrement())
  urls      String[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id          String       @id @default(uuid())
  question    Question?    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId  String?
  // answer     String?      @unique
  answer      String?
  type        QuestionType
  importId    String       @default("")
  sequenceNo  Int          @default(0)
  additional  String       @default("")
  isCorrect   Boolean
  answerImage String       @default("")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ExportedQuestion {
  id          String                 @id @default(uuid())
  name        String                 @default("")
  user        User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  question    Question?              @relation(fields: [questionsId], references: [id], onDelete: Cascade)
  userId      String?
  questionsId String?
  exportType  ExportTypes
  status      ExportedQuestionStatus @default(NORMAL)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
}

model Assignment {
  id          String      @id @default(uuid())
  title       String
  description String
  teacher     User        @relation("TeacherAssignments", fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId   String     
  submissions Submission[] @relation("AssignmentSubmissions")
  subjectId   String?     // Foreign key for Subject
  subject     Subject?    @relation(fields: [subjectId], references: [id], onDelete: Cascade) 
  gradeId     String?     
  grade       Grade?      @relation(fields: [gradeId], references: [id], onDelete: Cascade) 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}




model Submission {
  id           String      @id @default(uuid())
  assignment   Assignment  @relation("AssignmentSubmissions", fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String    
  student      User        @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  studentId    String      
  fileUrl      String     
  marks        Int?        
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}
